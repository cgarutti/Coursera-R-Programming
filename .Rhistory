x = strptime(datestring, "%B %d %Y %H:%M")
x
x = strptime(datestring, "%B %d %Y %H:%M")
x
x = strptime(datestring, "%B %d, %Y %H:%M")
strptime(datestring, "%B %d, %Y %H:%M")
x <- 4
class()
x <- list(2, "a", "b", TRUE)
class(x[[1]])
x[[1]]
x <- 1:4
y=2:#
3
y=2:3
x+y
x <- c(3, 5, 1, 10, 12, 6)
x
x[x %in% 1:5] <- 0
x
read.csv("C:/Users/cgarutti/Dropbox/Coursera/R Programming/Data/hw1_data.csv")
x=read.csv("C:/Users/cgarutti/Dropbox/Coursera/R Programming/Data/hw1_data.csv")
names(x)
head(x)
mean(x)
mean(x$Ozone)
mean(x$Ozone,na.rm=Y)
mean(x$Ozone,na.rm=T)
x.sub1 <- subset(x, Ozone>31 & Temp >90)
mean(x.sub1$Solar.R, na.rm=TRUE)
x.sub2 <- subset(x, Month == 6)
mean(subset(x, Month == 6)$Temp, na.rm=TRUE)
max(subset(x, Month == 5)$Ozone, na.rm=TRUE)
x = 4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- 1:4
y <- 2:3
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
x=read.csv("C:/Users/cgarutti/Dropbox/Coursera/R Programming/Data/hw1_data.csv")
names(x)
subset(x,2)
head(x,2)
nobs(x)
nrows(x)
summary(x)
nrows(x)
nrow(x)
tail(x)
tail(x,2)
x$Ozone
x$Ozone[47]
summary(x)
nmiss(x$Ozone)
miss(x$Ozone)
missing(x$Ozone)
?complete.cases
complete.cases(x$Ozone)
sum(complete.cases(x$Ozone))
sum(!complete.cases(x$Ozone))
sum(!complete.cases(x$Ozone)) #or summary(x)
mean(x$Ozone,na.rm=T)
x.sub1 <- subset(x, Ozone>31 & Temp >90)
mean(x.sub1$Solar.R, na.rm=TRUE)
x.sub2 <- subset(x, Month == 6)
mean(subset(x, Month == 6)$Temp, na.rm=TRUE)
max(subset(x, Month == 5)$Ozone, na.rm=TRUE)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- 1:4
y <- 2
x + y
x=read.csv("C:/Users/cgarutti/Dropbox/Coursera/R Programming/Data/hw1_data.csv")
names(x)
head(x,2)
#Question 13
#How many observations (i.e. rows) are in this data frame?
nrow(x)
#Question 14
#Extract the last 2 rows of the data frame and print them to the console.
#What does the output look like?
tail(x,2)
x$Ozone[47]
sum(!complete.cases(x$Ozone)) #or summary(x)
mean(x$Ozone,na.rm=T)
x.sub1 <- subset(x, Ozone>31 & Temp >90)
mean(x.sub1$Solar.R, na.rm=TRUE)
x.sub2 <- subset(x, Month == 6)
mean(subset(x, Month == 6)$Temp, na.rm=TRUE)
max(subset(x, Month == 5)$Ozone, na.rm=TRUE)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
h()
h(3)
parent.env()
parent.env(x)
parent.env(y)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
data(iris)
?iris
names(iris)
iris$Sepal.Length
iris$Species
class(iris)
iris.sub <- subset(iris, Species==virginica)
iris.sub <- subset(iris, Species=="virginica")
mean(iris.sub$Sepal.Length, na.rm=TRUE)
data(iris)
?iris
iris.sub <- subset(iris, Species=="virginica")
mean(iris.sub$Sepal.Length, na.rm=TRUE)
mean(iris)
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
mean(iris$Sepal.Length, na.rm=TRUE)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars.sub <- subset(mtcars, cyl==4)
mean(mtcars.sub$mpg, na.rm=TRUE)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429 - 82.63636
debug(ls)
ls()
ls(x)
?ls
?debug
debug(ls)
ls()
n
n
n
n
n
n
n
#Week 4 Quiz
#===========
#Question 1
#What is produced at the end of this snippet of R code?
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
pnorm(100)
pnorm(10)
dnorm(10)
qnorm(10)
rnorm(10)
rnorm()
?set.seed
set.seed()
set.seed(2)
set.seed(3)
dpois(10)
ppois(10)
rpois(10)
qpois(10)
qpois(10)
dpois(10)
ppois(10)
rpois(10)
qpois(10)
?dpois
?ppois
?dpois
?ppois
?rpois
?qpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
exit
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
hist(y)
set.seed(10)
x <- rbinom(100, 10, 0.5)
e <- rnorm(100, 0, 20)
y <- 0.5 + 2 * x + e
hist(y)
x <- rbinom(10000, 10, 0.5)
e <- rnorm(10000, 0, 20)
y <- 0.5 + 2 * x + e
hist(y)
?dbinom
?rnorm
rnorm(10)
pnorm(10)
qnorm(10)
dnorm(10)
#Function that calculates the mean of a pollutant (sulfate or nitrate)
#across a specified list of monitors.
#The function 'pollutantmean' takes three arguments:
#   'directory',
#   'pollutant', and
#   'id'
#Given a vector monitor ID numbers, 'pollutantmean' reads that monitors'
#particulate matter data from the directory specified in the 'directory'
#argument and returns the mean of the pollutant across all of the monitors,
#ignoring any missing values coded as NA.
pollutantmean <- function(directory, pollutant, id = 1:332) {
#set 'directory' as my working directory
setwd(directory)
#read CSV files
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.csv)
#convert list to data frame
x=do.call(rbind.data.frame, myfiles)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
x_sub=subset(x,ID %in% id)
#set digit precision
options(digits=4)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
mean(x_sub[[pollutant]],na.rm=T)
}
#Re-adapted from http://r-nold.blogspot.co.uk/2013/03/overlapping-histogram-in-r.html
#Random numbers
h2<-rnorm(1000,4)
h1<-rnorm(1000,6)
# Histogram Colored (blue and red)
hist(h1, col=rgb(1,0,0,0.5),xlim=c(0,10), ylim=c(0,200), main="Overlapping Histogram", xlab="Variable")
hist(h2, col=rgb(0,0,1,0.5), add=T)
box()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
setwd(C:\Users\cgarutti\Dropbox\Coursera\R Programming\Progr)
setwd(C:/Users/cgarutti/Dropbox/Coursera/R Programming/Progr)
setwd("C:/Users/cgarutti/Dropbox/Coursera/R Programming/Progr"")
setwd("C:/Users/cgarutti/Dropbox/Coursera/R Programming/Progr)
setwd("C:/Users/cgarutti/Dropbox/Coursera/R Programming/Progr")
submit()
checkPkgs <- function() {
pkg.inst <- installed.packages()
pkgs <- c("RCurl", "digest")
have.pkg <- pkgs %in% rownames(pkg.inst)
if(any(!have.pkg)) {
cat("Some packages need to be installed\n")
r <- readline("Install necessary packages [y/n]? ")
if(tolower(r) == "y") {
need <- pkgs[!have.pkg]
message("installing packages ",
paste(need, collapse = ", "))
install.packages(need)
}
}
}
checkPkgs()
CLASS <- "rprog-002"
challenge.url <- paste("http://class.coursera.org", CLASS,
"assignment/challenge", sep = "/")
submit.url <- paste("http://class.coursera.org", CLASS,
"assignment/submit", sep = "/")
loginPrompt <- function() {
email <- readline("Submission login (email): ")
passwd <- readline("Submission  password: ")
r <- list(email = email, passwd = passwd)
assign(".CourseraLogin", r, globalenv())
invisible(r)
}
submit <- function(manual = FALSE, resetLogin = FALSE) {
library(RCurl)
library(digest)
if(!manual) {
if(exists(".CourseraLogin") && !resetLogin)
cred <- get(".CourseraLogin")
else
cred <- loginPrompt()
if(!is.list(cred) || !(names(cred) %in% c("email", "passwd")))
stop("problem with login/password")
email <- cred$email
password <- cred$passwd
}
## Prompt Submission Part
sid <- partPrompt()
## Get output
output <- getOutput(sid)
if(!manual) {
## Get challenge
ch <- getChallenge(email)
## Attempt submission with challenge
ch.resp <- challengeResponse(password, ch$ch.key)
results <- submitSolution(email, ch.resp, sid, output, ch$state)
if(!length(results))
results <- "Incorrect!"
cat("Result: ", results, "\n")
}
else {
outfile <- paste(sid, "output.txt", sep = "-")
writeLines(as.character(output), outfile)
cat(sprintf("Please upload the file '%s' to Coursera\n",
outfile))
}
invisible()
}
getOutput <- function(sid) {
## JUST FOR TESTING
### sid <- sub("-dev", "", sid, fixed = TRUE)
if(sid == "pollutantmean-1") {
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
}
else if(sid == "pollutantmean-2") {
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70:72)
}
else if(sid == "pollutantmean-3") {
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 34)
}
else if(sid == "pollutantmean-4") {
source("pollutantmean.R")
pollutantmean("specdata", "nitrate")
}
else if(sid == "complete-1") {
source("complete.R")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
paste(cc$nobs, collapse = "\n")
}
else if(sid == "complete-2") {
source("complete.R")
cc <- complete("specdata", 54)
cc$nobs
}
else if(sid == "complete-3") {
source("complete.R")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
paste(cc[use, "nobs"], collapse = "\n")
}
else if(sid == "corr-1") {
source("corr.R")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
paste(out, collapse = "\n")
}
else if(sid == "corr-2") {
source("corr.R")
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
paste(out, collapse = "\n")
}
else if(sid == "corr-3") {
source("corr.R")
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
paste(c(n, round(cr, 4)), collapse = "\n")
}
else {
stop("invalid part number")
}
}
partPrompt <- function() {
sid <- c("pollutantmean-1",
"pollutantmean-2",
"pollutantmean-3",
"pollutantmean-4",
"complete-1",
"complete-2",
"complete-3",
"corr-1",
"corr-2",
"corr-3"
)
## JUST FOR TESTING
## sid <- paste(sid, "dev", sep = "-")
sidname <- c("'pollutantmean' part 1",
"'pollutantmean' part 2",
"'pollutantmean' part 3",
"'pollutantmean' part 4",
"'complete' part 1",
"'complete' part 2",
"'complete' part 3",
"'corr' part 1",
"'corr' part 2",
"'corr' part 3"
)
numparts <- length(sid)
cat(paste(paste("[", seq_len(numparts), "]", sep = ""), sidname),
sep = "\n")
partnum <- readline(sprintf("Which part are you submitting [1-%d]? ",
numparts))
partnum <- as.integer(partnum)
if(is.na(partnum))
stop("please specify part number")
if(partnum > numparts)
stop("invalid part number")
sid[partnum]
}
getChallenge <- function(email) {
params <- list(email_address = email, response_encoding = "delim")
result <- getForm(challenge.url, .params = params)
s <- strsplit(result, "|", fixed = TRUE)[[1]]
list(ch.key = s[5], state = s[7])
}
challengeResponse <- function(password, ch.key) {
x <- paste(ch.key, password, sep = "")
digest(x, algo = "sha1", serialize = FALSE)
}
submitSolution <- function(email, ch.resp, sid, output, signature, src = "",
http.version = NULL) {
output <- as.character(base64(output))
src <- as.character(base64(src))
params <- list(assignment_part_sid = sid,
email_address = email,
submission = output,
submission_aux = src,
challenge_response = ch.resp,
state = signature)
params <- lapply(params, URLencode)
result <- postForm(submit.url, .params = params)
s <- strsplit(result, "\\r\\n")[[1]]
tail(s, 1)
}
submit()
